Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Fundamentals Warmup
------
Q1. Looking at a call stack listing in a debugger, what is the indication that the program being debugged uses recursion?
A1. There are multiple identical function frames.

Q2. Subtract the innermost level number from the outermost to get the maximum count of stack frames that fit in the capacity of the call stack. How many stack frames fit in your system's call stack?
A2. 30000 ~ 40000

Q3. Describe how the symptoms of infinite recursion differ from the symptoms of an infinite loop.
A3. infinite recursion: Stack Overflow
    infinite loop: High CPU usage(Hang)

Q4. What is the pattern to which values of base number and exponent result in a test failure?
A4. base and exponent are both zero?

Q5. Of the existing five cases, are there any that seem redundant and can be removed from the function? Which do you think are absolutely necessary? Are there any cases that you're unsure about?
A5. base == 0 and base < 0

Balanced Operators
------
Q6. Compare your recursive solution to the iterative approach used for the Check Balance problem in Section 1. Which version do you find easier to read and understand? In which version did you find it easier to confirm the correct behavior?
A6. The former is the recursive solution, the latter is the iterative approach.

Merge Sorted Sequences
------
Q7. Give a rough estimate of the maximum length sequence that could be successfully merged on your system assuming a recursive implementation of binaryMerge.
A7. 30000~40000

Q8. What would be the observed behavior if attempting to recursively merge a sequence larger than that maximum?
A8. Stack overflow

Q9. Include the data from your execution timing and explain how it supports your Big O prediction for binaryMerge.
A9. 
    Line 125 TIME_OPERATION binaryMerge(a, b) (size =   200000) completed in    0.038 secs
    Line 125 TIME_OPERATION binaryMerge(a, b) (size =   800000) completed in    0.157 secs
    Line 125 TIME_OPERATION binaryMerge(a, b) (size =  3200000) completed in    0.592 secs
    Line 125 TIME_OPERATION binaryMerge(a, b) (size = 12800000) completed in    2.149 secs
    Line 125 TIME_OPERATION binaryMerge(a, b) (size = 51200000) completed in    9.053 secs

    The runtime is O(n).

Q10. Include the data from your execution timing and explain how it supports your Big O prediction for naiveMultiMerge.
A10. 
Measure n[*= 4]:
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =     1100) completed in    0.012 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =     4400) completed in    0.051 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    17600) completed in    0.205 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    70400) completed in    0.749 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =   281600) completed in    2.942 secs
Measure k[/= 4]:
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    11000) completed in    7.411 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    11000) completed in    2.289 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    11000) completed in    0.622 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    11000) completed in    0.158 secs
    Line 138 TIME_OPERATION naiveMultiMerge(all) (size =    11000) completed in    0.038 secs

    The runtime is O(nk).

Q11. Include the data from your execution timing and explain how it demonstrates O(n log k) runtime for recMultiMerge.
A11. 
Measure n[*= 4]:
    Line 170 TIME_OPERATION recMultiMerge(all) (size =    11000) completed in    0.036 secs
    Line 170 TIME_OPERATION recMultiMerge(all) (size =    44000) completed in    0.091 secs
    Line 170 TIME_OPERATION recMultiMerge(all) (size =   176000) completed in    0.326 secs
    Line 170 TIME_OPERATION recMultiMerge(all) (size =   704000) completed in    1.168 secs
    Line 170 TIME_OPERATION recMultiMerge(all) (size =  2816000) completed in    4.556 secs
Measure k[/= 4]:
    Line 180 TIME_OPERATION recMultiMerge(all) (size =   110000) completed in    0.472 secs
    Line 180 TIME_OPERATION recMultiMerge(all) (size =   110000) completed in    0.228 secs
    Line 180 TIME_OPERATION recMultiMerge(all) (size =   110000) completed in    0.159 secs
    Line 180 TIME_OPERATION recMultiMerge(all) (size =   110000) completed in    0.131 secs
    Line 180 TIME_OPERATION recMultiMerge(all) (size =   110000) completed in    0.087 secs

    The runtime is O(nlogk).

Q12. You run recMultiMerge on a sequence of size 1 million and see that it completes just fine. Explain why this is not running afoul of the call stack capacity limitation. Hint: How many stack frames (levels) are expected to be on the call stack at the deepest point in the recursion in recMultiMerge?
A12. TODO

Q13. A search engine can't read your mind (although some use personalization to try). If you search a term like "rice" that has many meanings, most search engines will show a few different guesses as to what you might be looking for among the top results: Rice University, what is rice, local restaurants that serve rice, how to cook rice, Rice University Athletics, nutrition of rice, and so on. Search engines often create ordered lists of the most "relevant" results for a certain query. Imagine that a search engine maintains an "ordered list of relevant results for Rice University" and an "ordered list of relevant results for how to cook rice." When the search term is ambiguous, like "rice," the engine shuffles the lists together.

- How could you use your multi-merge algorithm to achieve a result like the search results you saw? Write a couple lines of pseudocode.
- How would you decide when to shuffle together different meanings of a term and when to show only one? Please provide at least two specific scenarios as examples to explain your reasoning.
A13.

Q14. Sometimes search engines choose not to merge results and only show only one meaning or interpretation of a searched term. This often happens within a particular country or geographical area. For example, Katherine Ye & Rodrigo Ochigame show that searching the same term in different countries can deliver entirely different results, such as this search for the word "God." For more examples, see their Search Atlas.

- What does geographical sorting of search results assume about the people who live in each country? At minimum, explain your reasoning in 2-3 sentences.
A14.

Q15. One concern raised with search engines is that they might show different results to different people based on location, language, and especially search history, isolating them from information that might help them understand more about the diverse world in which they live. You may have heard this phenomenon referred to as the creation of “filter bubbles” when the effects of this personalization are negative.

- When would it be beneficial to show personalized search results? Provide a specific example of when you think it would be beneficial, and explain your reasoning.
- Why might showing personalized results to only particular groups of people be an issue? Provide a specific example of when you think it would be harmful, and explain your reasoning.
A15.

Backtracking Warmup
------
Q16. What is the value of totalMoves after stepping over the call to moveTower in hanoiAnimation?
A16. TODO

Q17. What is the value of the totalMoves variable after stepping over the first recursive sub-call? (In other words, within moveTower just after stepping over the first recursive sub-call to moveTower inside the else statement.)
A17. TODO

Q18. After breaking at the base case of moveTower and then choosing Step Out, where do you end up? (What function are you in, and at what line number?) What is the value of the totalMoves variable at this point?
A18. TODO

Q19. What is the smallest possible input that you used to trigger the bug in the program?
A19. TODO

Q20. Identify the one-character error in the code and explain why that one-character bug causes the function to return the output you see when running on the minimal input you listed above. You should be able to specifically account for how the error causes the result to change from “completely correct” to “terribly wrong.”
A20. TODO


Voting (Please note that this part of A3 is completely optional and will only be considered for extra credit. If you did not submit code for this part of the assignment, Q19 and Q20 will not be considered.)
------
Q21. What is the Big O of computePowerIndex? Include your timing data and explain how it supports your reasoning.
Q19: TODO

Q22. Use the Big O and timing data to estimate how long it would take to compute the power index for the 51 voting blocks in the U.S. Electoral College.
A22. TODO
